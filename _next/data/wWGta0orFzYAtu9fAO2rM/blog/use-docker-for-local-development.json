{"pageProps":{"title":"Use Docker for local development","slug":"use-docker-for-local-development","heroImageUrl":"","description":"Docker / Containers have become the de facto standard to build and deploy apps. The isolation, portability and easy scaling capabilities of containers are what makes them the popular choice for app deployments.\n\nHowever, containers can also be leveraged not only for app deployments but also for local development. They can solve a lot of developer problems. Using Docker containers during development can have the following benefits.\n\n- runs on my machine = runs anywhere\n- no cumbersome setup / version incompatibilties\n- development environment is closer to production\n- easy onboarding\n\nLet's walkthrough how I use Docker for development of this blog. \n\n## Base Image\nTheOverEngineeredBlog is built on next.js which needs node. Also the package manager of choice is yarn. The official node image on dockerhub is [here](https://hub.docker.com/_/node \"Official Node DockerHub Image\"). It includes yarn too. This blog uses `node:lts` image to get the latest lts version of node.\n\n## Docker Compose\nI have created a docker-compose.yml file at root of the project to define all the configuration for the container and add more container(s) if needed later.\n\n```yaml\nversion: '3.7'\n\nservices:\n  runner: \n    image: node:lts\n    ports: \n      - \"$PORT:3000\"\n      - \"$DEBUGPORT:9229\"\n    volumes:\n    - .:/app:cached\n    - yarn-cache-volume:/usr/local/share/.cache/yarn/v6:cached\n    working_dir: /app\n    command: \"$COMMAND\"\n\nvolumes:\n  yarn-cache-volume:\n```\nThe compose file defines a service named `runner` using the base image \"node:lts\".\n\nThe `ports` section instructs Docker to expose ports 3000 and 9229 at $PORT and $DEBUGPORT on the host. PORT and DEBUGPORT are environment variables to be used to set desired ports on the host.\n\nThe `volumes` section mounts the root directory of the project to `/app` inside the container. Also it defines a named persistent volume for yarn cache. This volume will be internally managed by docker and persist accross container stop/starts. This volume is created to persist yarn cache and reduce yarn run time next time the container starts.\n\n`working_dir` set the current directory to `./app` to avoid changing directory everytime container is started.\n\n`command` is set to a environment variable $COMMAND. It can be provided when invoking docker-compose.\n\n## RUN script\n\nI like to have a `run` script to spawn the container using docker-compose , so that I don't need to type in the same commands over and over. The script looks like this.\n\n```bash\n#!/bin/sh\nexport PORT=${PORT:-3000}\nexport DEBUGPORT=${DEBUGPORT:-9229}\nexport COMMAND=${@:-\"yarn dev\"}\nEXISTING_CONTAINER_ID=\"\"\nif [ -n `docker-compose ps -q runner` ]; then\n    EXISTING_CONTAINER_ID=`docker-compose ps -q runner`;\nelif [ -n `docker ps -q --no-trunc | grep $(docker-compose ps -q runner)` ]; then\n    EXISTING_CONTAINER_ID=`docker ps -q --no-trunc | grep $(docker-compose ps -q runner)`;\nfi\n\nif [ -z $EXISTING_CONTAINER_ID ]; then\n  COMMAND=${@:-\"yarn dev\"} docker-compose run --service-ports --rm runner\nelse\n  echo \"Existing container ${EXISTING_CONTAINER_ID}\"\n  docker exec -it ${EXISTING_CONTAINER_ID} ${COMMAND}\nfi\n```\n\nThe script can be used like this. Sections in `[]` are optional and have defaults set.\n\n```bash\n[PORT=<desired port on host> DEBUGPORT=<desired debug port on host>] ./run [<command to run>]\n\nDEFAULTS PORT=3000 DEBUGPORT=9229 COMMAND=\"yarn dev\"\n```\n","body":"Docker / Containers have become the de facto standard to build and deploy apps. The isolation, portability and easy scaling capabilities of containers are what makes them the popular choice for app deployments.\n\nHowever, containers can also be leveraged not only for app deployments but also for local development. They can solve a lot of developer problems. Using Docker containers during development can have the following benefits.\n\n- runs on my machine = runs anywhere\n- no cumbersome setup / version incompatibilties\n- development environment is closer to production\n- easy onboarding\n\nLet's walkthrough how I use Docker for development of this blog. \n\n## Base Image\nTheOverEngineeredBlog is built on next.js which needs node. Also the package manager of choice is yarn. The official node image on dockerhub is [here](https://hub.docker.com/_/node \"Official Node DockerHub Image\"). It includes yarn too. This blog uses `node:lts` image to get the latest lts version of node.\n\n## Docker Compose\nI have created a docker-compose.yml file at root of the project to define all the configuration for the container and add more container(s) if needed later.\n\n```yaml\nversion: '3.7'\n\nservices:\n  runner: \n    image: node:lts\n    ports: \n      - \"$PORT:3000\"\n      - \"$DEBUGPORT:9229\"\n    volumes:\n    - .:/app:cached\n    - yarn-cache-volume:/usr/local/share/.cache/yarn/v6:cached\n    working_dir: /app\n    command: \"$COMMAND\"\n\nvolumes:\n  yarn-cache-volume:\n```\nThe compose file defines a service named `runner` using the base image \"node:lts\".\n\nThe `ports` section instructs Docker to expose ports 3000 and 9229 at $PORT and $DEBUGPORT on the host. PORT and DEBUGPORT are environment variables to be used to set desired ports on the host.\n\nThe `volumes` section mounts the root directory of the project to `/app` inside the container. Also it defines a named persistent volume for yarn cache. This volume will be internally managed by docker and persist accross container stop/starts. This volume is created to persist yarn cache and reduce yarn run time next time the container starts.\n\n`working_dir` set the current directory to `./app` to avoid changing directory everytime container is started.\n\n`command` is set to a environment variable $COMMAND. It can be provided when invoking docker-compose.\n\n## RUN script\n\nI like to have a `run` script to spawn the container using docker-compose , so that I don't need to type in the same commands over and over. The script looks like this.\n\n```bash\n#!/bin/sh\nexport PORT=${PORT:-3000}\nexport DEBUGPORT=${DEBUGPORT:-9229}\nexport COMMAND=${@:-\"yarn dev\"}\nEXISTING_CONTAINER_ID=\"\"\nif [ -n `docker-compose ps -q runner` ]; then\n    EXISTING_CONTAINER_ID=`docker-compose ps -q runner`;\nelif [ -n `docker ps -q --no-trunc | grep $(docker-compose ps -q runner)` ]; then\n    EXISTING_CONTAINER_ID=`docker ps -q --no-trunc | grep $(docker-compose ps -q runner)`;\nfi\n\nif [ -z $EXISTING_CONTAINER_ID ]; then\n  COMMAND=${@:-\"yarn dev\"} docker-compose run --service-ports --rm runner\nelse\n  echo \"Existing container ${EXISTING_CONTAINER_ID}\"\n  docker exec -it ${EXISTING_CONTAINER_ID} ${COMMAND}\nfi\n```\n\nThe script can be used like this. Sections in `[]` are optional and have defaults set.\n\n```bash\n[PORT=<desired port on host> DEBUGPORT=<desired debug port on host>] ./run [<command to run>]\n\nDEFAULTS PORT=3000 DEBUGPORT=9229 COMMAND=\"yarn dev\"\n```\n\nTo start the app now I just need to do `./run`. This spawns the container, exposing ports 3000 and 9229 on the host and then runs `yarn dev` inside the container.\n\n![Sample Output](/docker-for-local-min.gif)\n\nNow , any command can be run inside the container by prefixing it with `./run`\nE.g. To add a package run './run yarn add some-package-name'\n\nYou could also do `./run bash` to get a bash shell attached to the container. This bash shell can be use to run commands inside the container without prefix './run'\n\nThe script also checks if a container exists for the app and reuses the container to run the command. Credits to [this answer on ServerFault](https://serverfault.com/a/935674/130937 \"Check if container running\") \n\nThis one time setup has helped me immensely. I do not have to worry about keeping different versions of the runtimes on my machine for node/java/python etc. Also I now need only one dependency for local development i.e. Docker!","author":{"name":"Anurag"},"publishDate":"2020-12-15T00:00+08:00","tags":null,"type":"blogPost"},"__N_SSG":true}