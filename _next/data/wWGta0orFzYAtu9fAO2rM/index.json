{"pageProps":{"posts":[{"title":"Use Docker for local development","slug":"use-docker-for-local-development","heroImageUrl":"","description":"Docker / Containers have become the de facto standard to build and deploy apps. The isolation, portability and easy scaling capabilities of containers are what makes them the popular choice for app deployments.\n\nHowever, containers can also be leveraged not only for app deployments but also for local development. They can solve a lot of developer problems. Using Docker containers during development can have the following benefits.\n\n- runs on my machine = runs anywhere\n- no cumbersome setup / version incompatibilties\n- development environment is closer to production\n- easy onboarding\n\nLet's walkthrough how I use Docker for development of this blog. \n\n## Base Image\nTheOverEngineeredBlog is built on next.js which needs node. Also the package manager of choice is yarn. The official node image on dockerhub is [here](https://hub.docker.com/_/node \"Official Node DockerHub Image\"). It includes yarn too. This blog uses `node:lts` image to get the latest lts version of node.\n\n## Docker Compose\nI have created a docker-compose.yml file at root of the project to define all the configuration for the container and add more container(s) if needed later.\n\n```yaml\nversion: '3.7'\n\nservices:\n  runner: \n    image: node:lts\n    ports: \n      - \"$PORT:3000\"\n      - \"$DEBUGPORT:9229\"\n    volumes:\n    - .:/app:cached\n    - yarn-cache-volume:/usr/local/share/.cache/yarn/v6:cached\n    working_dir: /app\n    command: \"$COMMAND\"\n\nvolumes:\n  yarn-cache-volume:\n```\nThe compose file defines a service named `runner` using the base image \"node:lts\".\n\nThe `ports` section instructs Docker to expose ports 3000 and 9229 at $PORT and $DEBUGPORT on the host. PORT and DEBUGPORT are environment variables to be used to set desired ports on the host.\n\nThe `volumes` section mounts the root directory of the project to `/app` inside the container. Also it defines a named persistent volume for yarn cache. This volume will be internally managed by docker and persist accross container stop/starts. This volume is created to persist yarn cache and reduce yarn run time next time the container starts.\n\n`working_dir` set the current directory to `./app` to avoid changing directory everytime container is started.\n\n`command` is set to a environment variable $COMMAND. It can be provided when invoking docker-compose.\n\n## RUN script\n\nI like to have a `run` script to spawn the container using docker-compose , so that I don't need to type in the same commands over and over. The script looks like this.\n\n```bash\n#!/bin/sh\nexport PORT=${PORT:-3000}\nexport DEBUGPORT=${DEBUGPORT:-9229}\nexport COMMAND=${@:-\"yarn dev\"}\nEXISTING_CONTAINER_ID=\"\"\nif [ -n `docker-compose ps -q runner` ]; then\n    EXISTING_CONTAINER_ID=`docker-compose ps -q runner`;\nelif [ -n `docker ps -q --no-trunc | grep $(docker-compose ps -q runner)` ]; then\n    EXISTING_CONTAINER_ID=`docker ps -q --no-trunc | grep $(docker-compose ps -q runner)`;\nfi\n\nif [ -z $EXISTING_CONTAINER_ID ]; then\n  COMMAND=${@:-\"yarn dev\"} docker-compose run --service-ports --rm runner\nelse\n  echo \"Existing container ${EXISTING_CONTAINER_ID}\"\n  docker exec -it ${EXISTING_CONTAINER_ID} ${COMMAND}\nfi\n```\n\nThe script can be used like this. Sections in `[]` are optional and have defaults set.\n\n```bash\n[PORT=<desired port on host> DEBUGPORT=<desired debug port on host>] ./run [<command to run>]\n\nDEFAULTS PORT=3000 DEBUGPORT=9229 COMMAND=\"yarn dev\"\n```\n","body":"Docker / Containers have become the de facto standard to build and deploy apps. The isolation, portability and easy scaling capabilities of containers are what makes them the popular choice for app deployments.\n\nHowever, containers can also be leveraged not only for app deployments but also for local development. They can solve a lot of developer problems. Using Docker containers during development can have the following benefits.\n\n- runs on my machine = runs anywhere\n- no cumbersome setup / version incompatibilties\n- development environment is closer to production\n- easy onboarding\n\nLet's walkthrough how I use Docker for development of this blog. \n\n## Base Image\nTheOverEngineeredBlog is built on next.js which needs node. Also the package manager of choice is yarn. The official node image on dockerhub is [here](https://hub.docker.com/_/node \"Official Node DockerHub Image\"). It includes yarn too. This blog uses `node:lts` image to get the latest lts version of node.\n\n## Docker Compose\nI have created a docker-compose.yml file at root of the project to define all the configuration for the container and add more container(s) if needed later.\n\n```yaml\nversion: '3.7'\n\nservices:\n  runner: \n    image: node:lts\n    ports: \n      - \"$PORT:3000\"\n      - \"$DEBUGPORT:9229\"\n    volumes:\n    - .:/app:cached\n    - yarn-cache-volume:/usr/local/share/.cache/yarn/v6:cached\n    working_dir: /app\n    command: \"$COMMAND\"\n\nvolumes:\n  yarn-cache-volume:\n```\nThe compose file defines a service named `runner` using the base image \"node:lts\".\n\nThe `ports` section instructs Docker to expose ports 3000 and 9229 at $PORT and $DEBUGPORT on the host. PORT and DEBUGPORT are environment variables to be used to set desired ports on the host.\n\nThe `volumes` section mounts the root directory of the project to `/app` inside the container. Also it defines a named persistent volume for yarn cache. This volume will be internally managed by docker and persist accross container stop/starts. This volume is created to persist yarn cache and reduce yarn run time next time the container starts.\n\n`working_dir` set the current directory to `./app` to avoid changing directory everytime container is started.\n\n`command` is set to a environment variable $COMMAND. It can be provided when invoking docker-compose.\n\n## RUN script\n\nI like to have a `run` script to spawn the container using docker-compose , so that I don't need to type in the same commands over and over. The script looks like this.\n\n```bash\n#!/bin/sh\nexport PORT=${PORT:-3000}\nexport DEBUGPORT=${DEBUGPORT:-9229}\nexport COMMAND=${@:-\"yarn dev\"}\nEXISTING_CONTAINER_ID=\"\"\nif [ -n `docker-compose ps -q runner` ]; then\n    EXISTING_CONTAINER_ID=`docker-compose ps -q runner`;\nelif [ -n `docker ps -q --no-trunc | grep $(docker-compose ps -q runner)` ]; then\n    EXISTING_CONTAINER_ID=`docker ps -q --no-trunc | grep $(docker-compose ps -q runner)`;\nfi\n\nif [ -z $EXISTING_CONTAINER_ID ]; then\n  COMMAND=${@:-\"yarn dev\"} docker-compose run --service-ports --rm runner\nelse\n  echo \"Existing container ${EXISTING_CONTAINER_ID}\"\n  docker exec -it ${EXISTING_CONTAINER_ID} ${COMMAND}\nfi\n```\n\nThe script can be used like this. Sections in `[]` are optional and have defaults set.\n\n```bash\n[PORT=<desired port on host> DEBUGPORT=<desired debug port on host>] ./run [<command to run>]\n\nDEFAULTS PORT=3000 DEBUGPORT=9229 COMMAND=\"yarn dev\"\n```\n\nTo start the app now I just need to do `./run`. This spawns the container, exposing ports 3000 and 9229 on the host and then runs `yarn dev` inside the container.\n\n![Sample Output](/docker-for-local-min.gif)\n\nNow , any command can be run inside the container by prefixing it with `./run`\nE.g. To add a package run './run yarn add some-package-name'\n\nYou could also do `./run bash` to get a bash shell attached to the container. This bash shell can be use to run commands inside the container without prefix './run'\n\nThe script also checks if a container exists for the app and reuses the container to run the command. Credits to [this answer on ServerFault](https://serverfault.com/a/935674/130937 \"Check if container running\") \n\nThis one time setup has helped me immensely. I do not have to worry about keeping different versions of the runtimes on my machine for node/java/python etc. Also I now need only one dependency for local development i.e. Docker!","author":{"name":"Anurag"},"publishDate":"2020-12-15T00:00+08:00","tags":null,"type":"blogPost"},{"title":"Generate RSS and Sitemap for Next.js JAMstack site","slug":"generate-rss-and-sitemap-for-nextjs-jamstack-site","heroImageUrl":"","description":"RSS and sitemap are essential for blogs today. RSS Feeds let users subscribe to your content and improves user engagement. On the other hand, a sitemap is for search engines to find and index your content. Let's see how to generate these in a Next.js JAMStack site.","body":"RSS and sitemap are essential for blogs today. RSS Feeds let users subscribe to your content and improves user engagement. On the other hand, a sitemap is for search engines to find and index your content. \n\nWhen using a CMS like wordpress etc.., the RSS and sitemap XML files are generated at runtime. However, for JAMStack websites, we would like to create them at the build stage. I was not able to find an OOTB solution for next.js to create these files. The XML files for RSS and sitemap are not too complex to generate. Hence, I decided not to introduce any third-party dependencies to generate these files.\n\nThere are mainly three questions to answer when generating these files. Where, When and How?\n\n## 1. Where to place \n\nThe convention followed by many is to place rss.xml and sitemap.xml at the root of the website. Sitemaps can be split into files and referenced from the main sitemap.xml. This is needed when sitemaps grow very huge. We will stick to single sitemap.xml for now.\n\nNext.js routing does not support files that are not content. So, what we can do is, to place these files in the `public` directory. Next's static file serving feature serves the files under this directory at the root of the website.\n\n## 2. When to generate \n\nWe have to generate the files inside the public directory during the build. During the build, the `getStaticProps` function gets invoked for each page. We can leverage this function to create our XML files.\n\nWe can use `getStaticProps` function of any page component to create the files. However, this will add unnecessary code to the pages. So, I created a dummy.tsx page. The `getStaticProps` of this page component will contain the additional build time processing logic.\n\nIf anyone visits /dummy we should probably return 404 and ignore the page from any search engine indexing. \n\n###### dummy.tsx [View on GitHub][1]\n```JSX\nconst Dummy: React.FC = () => (\n  <>\n    <Head>\n      <meta name=\"robots\" content=\"noindex\" />\n    </Head>\n    <DefaultErrorPage statusCode={404} />\n  </>\n);\n```\n\n## 3. How to generate \n\nThe creation of XML files is a matter of iterating over the content and generating the XML tags. This can be implemented in the `getStaticProps` function of `pages/dummy.tsx`. You can find the snippets of the code below. You can refer to GitHub repo for this blog for the full code sample. \n\n###### dummy.tsx - getStaticProps() [View on GitHub][2]\n```javascript\nexport const getStaticProps: GetStaticProps = async () => {\n  const posts = await getPosts();\n  generateRss(posts);\n\n  const pages = await getAllContent();\n  generateSitemap(pages);\n\n  return {\n    props: {},\n  };\n};\n```\n\n###### generateRss() [View on GitHub][3]\n```javascript\nconst generateRssItem = (post: Post): string => `\n  <item>\n    <guid>${getFullUrl(`blog/${post.slug}`)}</guid>\n    <title>${post.title}</title>\n    <link>${getFullUrl(`blog/${post.slug}`)}</link>\n    <description>${post.description}</description>\n    <pubDate>${new Date(post.publishDate).toUTCString()}</pubDate>\n  </item>\n`;\n\nexport default (posts: Post[]): void => {\n  const rss = `<rss version=\"2.0\" xmlns:atom=\"http://www.w3.org/2005/Atom\">\n    <channel>\n      <title>${SITE_TITLE}</title>\n      <link>${getFullUrl('')}</link>\n      <description>${SITE_TITLE}</description>\n      <language>en</language>\n      <lastBuildDate>${new Date(posts[0].publishDate).toUTCString()}</lastBuildDate>\n      <atom:link href=\"${getFullUrl('rss.xml')}\" rel=\"self\" type=\"application/rss+xml\"/>\n      ${posts.map(generateRssItem).join('')}\n    </channel>\n  </rss>`;\n  fs.writeFileSync('./public/rss.xml', rss);\n};\n```\n\n###### generateSitemap() [View on GitHub][4]\n```javascript\nexport default (pages: Content[]): void => {\n  const links = compose(map(mapToSitemapEntry))(pages);\n\n  if (fs.existsSync(SITEMAP_PATH)) {\n    fs.unlinkSync(SITEMAP_PATH);\n  }\n  const stream = fs.createWriteStream(SITEMAP_PATH, { flags: 'a' });\n  stream.write(`<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n  <urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">`);\n  links.forEach((item) => {\n    stream.write(`\n      <url>\n        <loc>${item.url}</loc>\n        <changefreq>${item.changefreq}</changefreq>\n        <priority>${item.priority}</priority>\n      </url>`);\n  });\n  stream.write('\\n');\n  stream.write('</urlset>');\n  stream.end();\n};\n```\n\nYou can later validate these xml files againts the specs at [W3C Feed Validator](https://validator.w3.org/feed/ \"W3C Feed Validator\") and [XML Sitemap Validator](https://www.xml-sitemaps.com/validate-xml-sitemap.html \"XML Sitemap Validator\")\n\n[1]: https://github.com/anuragashok/theoverengineered.blog/blob/1b1f462a7cb697ecdcd222313d913101de176dfa/src/pages/dummy.tsx#L15-L22 \"View on GitHub\"\n[2]: https://github.com/anuragashok/theoverengineered.blog/blob/1b1f462a7cb697ecdcd222313d913101de176dfa/src/pages/dummy.tsx#L24-L34 \"View on GitHub\"\n[3]: https://github.com/anuragashok/theoverengineered.blog/blob/1b1f462a7cb697ecdcd222313d913101de176dfa/src/lib/rss.ts \"View on GitHub\"\n[4]: https://github.com/anuragashok/theoverengineered.blog/blob/1b1f462a7cb697ecdcd222313d913101de176dfa/src/lib/sitemap.ts \"View on GitHub\"","author":{"name":"Anurag"},"publishDate":"2020-12-01T00:00+08:00","tags":null,"type":"blogPost"},{"title":"Initial Post","slug":"initial-post","heroImageUrl":"","description":"Jamstack is very popular these days. I decided to build this site using Jamstack practices. This post summarizes the various layers of the Jamstack eco-system used on this site.","body":"Taking a cue from [Initial Commit][1], I decided to name this first post as Initial Post.\n\n[Jamstack][2] is very popular these days. So decided to build this site using Jamstack practices. This post summarizes the various parts of the Jamstack eco-system used on the site. \n\n*   **Presentation Layer:** ReactJS has been on my learning list. The most popular starting points for ReactJS are create-react-app and Next.js. I eventually decided to use Next.js as it provides server-side rendering, static-site generation and serverless functions out of the box. The features can help to get the site up quickly.\n\n*   **API:** The site does not need an API at the moment. However, Next.js provides a [straightforward solution][3] to create APIs too.\n\n*   **VCS:** Github.\n\n*   **Hosting / CDN:** The site runs on Github pages. It's free and fast. It provides all the features needed for now. However, I would also like to try out services like Netlify.\n\n*   **Backend:** At the moment, the site can compile to static HTML. So I am deferring this decision until the time I need a backend.\n\nThe overall architecture of the site looks like this.\n\n![Intial Architecture][4]\n\n### References:\n\n*   https://medium.com/@gianfranconuschese/the-jamstack-return-of-the-server-side-rendering-5a1313dafc92\n*   https://nextjs.org/docs/api-routes/introduction\n*   https://dev.to/eroberts/why-you-should-use-netlify-instead-of-github-pages-3on1\n\n[1]: https://initialcommit.com/blog/What-Is-An-Initial-Commit-In-Git \"What is initial commit?\"\n[2]: https://medium.com/@gianfranconuschese/the-jamstack-return-of-the-server-side-rendering-5a1313dafc92 \"Jamstack\"\n[3]: https://nextjs.org/docs/api-routes/introduction \"NextJS solution for API routes\"\n[4]: /diagrams/initial-post.svg","author":{"name":"Anurag"},"publishDate":"2020-12-01T00:00+08:00","tags":null,"type":"blogPost"}]},"__N_SSG":true}