{"pageProps":{"title":"Use Docker for local development","slug":"use-docker-for-local-development","heroImageUrl":"//images.ctfassets.net/lybfa03y94yw/31kEfTG8wIqkq8mixJ9skZ/6d86d7f4d0c700179d8eae5b31e01766/Untitled_design.jpg","description":"Containers are not only for application deployments. They offer many advantages for local development too. Find out how theOverEngineeredBlog uses Docker for local development.","body":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"//images.ctfassets.net/lybfa03y94yw/31kEfTG8wIqkq8mixJ9skZ/6d86d7f4d0c700179d8eae5b31e01766/Untitled_design.jpg\",\n    \"alt\": \"a\"\n  })), mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Photo by \", mdx(\"a\", _extends({\n    parentName: \"em\"\n  }, {\n    \"href\": \"https://www.pexels.com/@samuel-wolfl-628277?utm_content=attributionCopyText&utm_medium=referral&utm_source=pexels\"\n  }), \"Samuel W\\xF6lfl\"), \" from \", mdx(\"a\", _extends({\n    parentName: \"em\"\n  }, {\n    \"href\": \"https://www.pexels.com/photo/intermodal-container-stacked-on-port-1427541/?utm_content=attributionCopyText&utm_medium=referral&utm_source=pexels\"\n  }), \"Pexels\"))), mdx(\"p\", null, \"Docker/Containers have become the de facto standard for building and deploying applications. The isolation, portability and easy scaling capabilities of containers make them the popular choice for app deployments.\"), mdx(\"p\", null, \"However, containers are not only for application deployments but can also be for local development. They can solve many developer issues. The use of Docker containers during development can have the following advantages.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"runs on my machine = runs anywhere\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"there are no cumbersome configuration/version incompatibilities\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The development environment is closer to production\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"easy onboarding of new developers\")), mdx(\"p\", null, \"Let's see how I use Docker for the development of this blog. \"), mdx(\"h2\", null, \"Base Image\"), mdx(\"p\", null, \"TheOverEngineeredBlog is built on next.js which needs node. Also, the package manager of choice is yarn. The official node image on docker hub is \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://hub.docker.com/_/node\",\n    \"title\": \"Official Node DockerHub Image\"\n  }), \"here\"), \". It includes yarn too. This blog uses \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"node:lts\"), \" image to get the latest lts version of node.\"), mdx(\"h2\", null, \"Docker Compose\"), mdx(\"p\", null, \"I created a docker-compose.yml file at the root of the project to define the entire container configuration and add more containers if necessary later.\"), mdx(\"h6\", null, \"docker-compose.yml \", mdx(\"a\", _extends({\n    parentName: \"h6\"\n  }, {\n    \"href\": \"https://github.com/anuragashok/theoverengineered.blog/blob/d784e3e072e19ae753cbe3fd39c64de86388e851/docker-compose.yml\",\n    \"title\": \"View on Github\"\n  }), \"View on GitHub\")), mdx(\"div\", {\n    \"className\": \"remark-highlight\"\n  }, mdx(\"pre\", _extends({\n    parentName: \"div\"\n  }, {\n    \"className\": \"language-yaml\"\n  }), mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yaml\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token key atrule\"\n  }), \"version\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \":\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token string\"\n  }), \"'3.7'\"), \"\\n\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token key atrule\"\n  }), \"services\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \":\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token key atrule\"\n  }), \"runner\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \":\"), \" \\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token key atrule\"\n  }), \"image\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \":\"), \" node\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \":\"), \"lts\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token key atrule\"\n  }), \"ports\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \":\"), \" \\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"-\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token string\"\n  }), \"\\\"$PORT:3000\\\"\"), \"\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"-\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token string\"\n  }), \"\\\"$DEBUGPORT:9229\\\"\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token key atrule\"\n  }), \"volumes\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \":\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"-\"), \" .\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \":\"), \"/app\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \":\"), \"cached\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"-\"), \" yarn\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"-\"), \"cache\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"-\"), \"volume\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \":\"), \"/usr/local/share/.cache/yarn/v6\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \":\"), \"cached\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token key atrule\"\n  }), \"working_dir\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \":\"), \" /app\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token key atrule\"\n  }), \"command\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \":\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token string\"\n  }), \"\\\"$COMMAND\\\"\"), \"\\n\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token key atrule\"\n  }), \"volumes\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \":\"), \"\\n  yarn\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"-\"), \"cache\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"-\"), \"volume\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \":\"), \"\\n\"))), mdx(\"p\", null, \"The compose file defines a service named \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"runner\"), \" using the base image \\\"node:lts\\\".\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ports\"), \" section instructs Docker to expose ports 3000 and 9229 at $PORT and $DEBUGPORT on the host. PORT and DEBUGPORT are environment variables to configure the desired ports on the host.\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"volumes\"), \" section defines mounts and named volume. The root directory of the project is mounted to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/app\"), \" inside the container. Also, it defines a named persistent volume for yarn cache. Docker manages this volume and persists it through the container stop/start. This cache reduces yarn execution time next time the container starts.\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"working_dir\"), \" set the current directory to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"./app\"), \" to avoid changing the directory each time the container starts.\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"command\"), \" is set to an environment variable $COMMAND. It can be supplied when invoking docker-compose.\"), mdx(\"h2\", null, \"RUN script\"), mdx(\"p\", null, \"I like to have a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"run\"), \" script to spawn the container using docker-compose to avoid writing the same commands each time. \"), mdx(\"h6\", null, \"run \", mdx(\"a\", _extends({\n    parentName: \"h6\"\n  }, {\n    \"href\": \"https://github.com/anuragashok/theoverengineered.blog/blob/d784e3e072e19ae753cbe3fd39c64de86388e851/run\",\n    \"title\": \"View on GitHub\"\n  }), \"View on GitHub\")), mdx(\"div\", {\n    \"className\": \"remark-highlight\"\n  }, mdx(\"pre\", _extends({\n    parentName: \"div\"\n  }, {\n    \"className\": \"language-bash\"\n  }), mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token shebang important\"\n  }), \"#!/bin/sh\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token builtin class-name\"\n  }), \"export\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token assign-left variable\"\n  }), \"PORT\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"=\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token variable\"\n  }), \"${PORT\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token operator\"\n  }), \":-\"), \"3000}\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token builtin class-name\"\n  }), \"export\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token assign-left variable\"\n  }), \"DEBUGPORT\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"=\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token variable\"\n  }), \"${DEBUGPORT\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token operator\"\n  }), \":-\"), \"9229}\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token builtin class-name\"\n  }), \"export\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token assign-left variable\"\n  }), \"COMMAND\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"=\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token variable\"\n  }), \"${@\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token operator\"\n  }), \":-\"), \"\\\"yarn dev\\\"}\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token assign-left variable\"\n  }), \"EXISTING_CONTAINER_ID\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"=\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token string\"\n  }), \"\\\"\\\"\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"if\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"[\"), \" -n \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token variable\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token variable\"\n  }), \"`\"), \"docker-compose \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token function\"\n  }), \"ps\"), \" -q runner\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token variable\"\n  }), \"`\")), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"]\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \";\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"then\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token assign-left variable\"\n  }), \"EXISTING_CONTAINER_ID\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"=\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token variable\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token variable\"\n  }), \"`\"), \"docker-compose \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token function\"\n  }), \"ps\"), \" -q runner\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token variable\"\n  }), \"`\")), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \";\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"elif\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"[\"), \" -n \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token variable\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token variable\"\n  }), \"`\"), \"docker \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token function\"\n  }), \"ps\"), \" -q --no-trunc \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"|\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token function\"\n  }), \"grep\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"$(\"), \"docker-compose \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token function\"\n  }), \"ps\"), \" -q runner\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \")\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token variable\"\n  }), \"`\")), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"]\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \";\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"then\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token assign-left variable\"\n  }), \"EXISTING_CONTAINER_ID\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"=\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token variable\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token variable\"\n  }), \"`\"), \"docker \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token function\"\n  }), \"ps\"), \" -q --no-trunc \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"|\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token function\"\n  }), \"grep\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"$(\"), \"docker-compose \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token function\"\n  }), \"ps\"), \" -q runner\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \")\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token variable\"\n  }), \"`\")), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \";\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"fi\"), \"\\n\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"if\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"[\"), \" -z \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token variable\"\n  }), \"$EXISTING_CONTAINER_ID\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"]\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \";\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"then\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token assign-left variable\"\n  }), \"COMMAND\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"=\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token variable\"\n  }), \"${@\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token operator\"\n  }), \":-\"), \"\\\"yarn dev\\\"}\"), \" docker-compose run --service-ports --rm runner\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"else\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token builtin class-name\"\n  }), \"echo\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token string\"\n  }), \"\\\"Existing container \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token variable\"\n  }), \"${EXISTING_CONTAINER_ID}\"), \"\\\"\"), \"\\n  docker \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token builtin class-name\"\n  }), \"exec\"), \" -it \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token variable\"\n  }), \"${EXISTING_CONTAINER_ID}\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token variable\"\n  }), \"${COMMAND}\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"fi\"), \"\\n\"))), mdx(\"p\", null, \"The script is executed like this.\"), mdx(\"div\", {\n    \"className\": \"remark-highlight\"\n  }, mdx(\"pre\", _extends({\n    parentName: \"div\"\n  }, {\n    \"className\": \"language-bash\"\n  }), mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"[\"), \"PORT\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"=\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"<\"), \"desired port on host\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \">\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token assign-left variable\"\n  }), \"DEBUGPORT\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"=\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"<\"), \"desired debug port on host\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \">\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"]\"), \" ./run \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"[\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"<\"), \"command\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \">\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"]\"), \"\\n\\nDEFAULTS \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token assign-left variable\"\n  }), \"PORT\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"=\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token number\"\n  }), \"3000\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token assign-left variable\"\n  }), \"DEBUGPORT\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"=\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token number\"\n  }), \"9229\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token assign-left variable\"\n  }), \"COMMAND\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"=\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token string\"\n  }), \"\\\"yarn dev\\\"\"), \"\\n\"))), mdx(\"p\", null, \"Sections in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[]\"), \" are optional and have defaults set.\"), mdx(\"p\", null, \"To start the application, I need to write \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"./run\"), \" on the shell. It starts the container, exposing the ports 3000 and 9229 on the host and then runs \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"yarn dev\"), \" inside the container.\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://theoverengineered.blog/docker-local.jpg\",\n    \"alt\": \"Sample Output\"\n  }))), mdx(\"p\", null, \"Any command can be executed inside the container by prefixing it with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"./run\"), \"\\nE.g. To add a package, run \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"./run yarn add some-package-name\")), mdx(\"p\", null, \"You could also do \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"./run bash\"), \" to get a bash shell attached to the container. This bash shell can be used to execute commands inside the container without the prefix './run'\"), mdx(\"p\", null, \"The script also checks if a container is already running for the application and reuses the container to execute the command. Credits to \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://serverfault.com/a/935674/130937\",\n    \"title\": \"Check if container running\"\n  }), \"this answer on ServerFault\"), \" \"), mdx(\"p\", null, \"We can also write a similar script for windows machines using cmd/PowerShell.\"), mdx(\"p\", null, \"This setup has helped me enormously. I don't have to worry about installing different versions of node/java/python etc. Besides, now the only dependency for local development is, Docker!\"));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<p><picture><source srcSet=\"//images.ctfassets.net/lybfa03y94yw/31kEfTG8wIqkq8mixJ9skZ/6d86d7f4d0c700179d8eae5b31e01766/Untitled_design.jpg?fm=webp\"/><source srcSet=\"//images.ctfassets.net/lybfa03y94yw/31kEfTG8wIqkq8mixJ9skZ/6d86d7f4d0c700179d8eae5b31e01766/Untitled_design.jpg\"/><img alt=\"a\" src=\"//images.ctfassets.net/lybfa03y94yw/31kEfTG8wIqkq8mixJ9skZ/6d86d7f4d0c700179d8eae5b31e01766/Untitled_design.jpg\" width=\"100%\"/></picture><br/>\n<em>Photo by <a href=\"https://www.pexels.com/@samuel-wolfl-628277?utm_content=attributionCopyText&amp;utm_medium=referral&amp;utm_source=pexels\" target=\"_blank\" rel=\"noopener noreferrer\">Samuel Wölfl</a> from <a href=\"https://www.pexels.com/photo/intermodal-container-stacked-on-port-1427541/?utm_content=attributionCopyText&amp;utm_medium=referral&amp;utm_source=pexels\" target=\"_blank\" rel=\"noopener noreferrer\">Pexels</a></em></p><p>Docker/Containers have become the de facto standard for building and deploying applications. The isolation, portability and easy scaling capabilities of containers make them the popular choice for app deployments.</p><p>However, containers are not only for application deployments but can also be for local development. They can solve many developer issues. The use of Docker containers during development can have the following advantages.</p><ul><li>runs on my machine = runs anywhere</li><li>there are no cumbersome configuration/version incompatibilities</li><li>The development environment is closer to production</li><li>easy onboarding of new developers</li></ul><p>Let&#x27;s see how I use Docker for the development of this blog. </p><h2>Base Image</h2><p>TheOverEngineeredBlog is built on next.js which needs node. Also, the package manager of choice is yarn. The official node image on docker hub is <a href=\"https://hub.docker.com/_/node\" target=\"_blank\" rel=\"noopener noreferrer\">here</a>. It includes yarn too. This blog uses <code>node:lts</code> image to get the latest lts version of node.</p><h2>Docker Compose</h2><p>I created a docker-compose.yml file at the root of the project to define the entire container configuration and add more containers if necessary later.</p><h6 class=\"MuiTypography-root jss1 MuiTypography-subtitle2\">docker-compose.yml <a href=\"https://github.com/anuragashok/theoverengineered.blog/blob/d784e3e072e19ae753cbe3fd39c64de86388e851/docker-compose.yml\" target=\"_blank\" rel=\"noopener noreferrer\">View on GitHub</a></h6><div class=\"remark-highlight\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">version</span><span class=\"token punctuation\">:</span> <span class=\"token string\">&#x27;3.7&#x27;</span>\n\n<span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">runner</span><span class=\"token punctuation\">:</span> \n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> node<span class=\"token punctuation\">:</span>lts\n    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span> \n      <span class=\"token punctuation\">-</span> <span class=\"token string\">&quot;$PORT:3000&quot;</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">&quot;$DEBUGPORT:9229&quot;</span>\n    <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> .<span class=\"token punctuation\">:</span>/app<span class=\"token punctuation\">:</span>cached\n    <span class=\"token punctuation\">-</span> yarn<span class=\"token punctuation\">-</span>cache<span class=\"token punctuation\">-</span>volume<span class=\"token punctuation\">:</span>/usr/local/share/.cache/yarn/v6<span class=\"token punctuation\">:</span>cached\n    <span class=\"token key atrule\">working_dir</span><span class=\"token punctuation\">:</span> /app\n    <span class=\"token key atrule\">command</span><span class=\"token punctuation\">:</span> <span class=\"token string\">&quot;$COMMAND&quot;</span>\n\n<span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n  yarn<span class=\"token punctuation\">-</span>cache<span class=\"token punctuation\">-</span>volume<span class=\"token punctuation\">:</span>\n</code></pre></div><p>The compose file defines a service named <code>runner</code> using the base image &quot;node:lts&quot;.</p><p>The <code>ports</code> section instructs Docker to expose ports 3000 and 9229 at $PORT and $DEBUGPORT on the host. PORT and DEBUGPORT are environment variables to configure the desired ports on the host.</p><p>The <code>volumes</code> section defines mounts and named volume. The root directory of the project is mounted to <code>/app</code> inside the container. Also, it defines a named persistent volume for yarn cache. Docker manages this volume and persists it through the container stop/start. This cache reduces yarn execution time next time the container starts.</p><p><code>working_dir</code> set the current directory to <code>./app</code> to avoid changing the directory each time the container starts.</p><p><code>command</code> is set to an environment variable $COMMAND. It can be supplied when invoking docker-compose.</p><h2>RUN script</h2><p>I like to have a <code>run</code> script to spawn the container using docker-compose to avoid writing the same commands each time. </p><h6 class=\"MuiTypography-root jss1 MuiTypography-subtitle2\">run <a href=\"https://github.com/anuragashok/theoverengineered.blog/blob/d784e3e072e19ae753cbe3fd39c64de86388e851/run\" target=\"_blank\" rel=\"noopener noreferrer\">View on GitHub</a></h6><div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/sh</span>\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">PORT</span><span class=\"token operator\">=</span><span class=\"token variable\">${PORT<span class=\"token operator\">:-</span>3000}</span>\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">DEBUGPORT</span><span class=\"token operator\">=</span><span class=\"token variable\">${DEBUGPORT<span class=\"token operator\">:-</span>9229}</span>\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">COMMAND</span><span class=\"token operator\">=</span><span class=\"token variable\">${@<span class=\"token operator\">:-</span>&quot;yarn dev&quot;}</span>\n<span class=\"token assign-left variable\">EXISTING_CONTAINER_ID</span><span class=\"token operator\">=</span><span class=\"token string\">&quot;&quot;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> -n <span class=\"token variable\"><span class=\"token variable\">`</span>docker-compose <span class=\"token function\">ps</span> -q runner<span class=\"token variable\">`</span></span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n    <span class=\"token assign-left variable\">EXISTING_CONTAINER_ID</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">`</span>docker-compose <span class=\"token function\">ps</span> -q runner<span class=\"token variable\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">elif</span> <span class=\"token punctuation\">[</span> -n <span class=\"token variable\"><span class=\"token variable\">`</span>docker <span class=\"token function\">ps</span> -q --no-trunc <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> <span class=\"token punctuation\">$(</span>docker-compose <span class=\"token function\">ps</span> -q runner<span class=\"token punctuation\">)</span><span class=\"token variable\">`</span></span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n    <span class=\"token assign-left variable\">EXISTING_CONTAINER_ID</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">`</span>docker <span class=\"token function\">ps</span> -q --no-trunc <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> <span class=\"token punctuation\">$(</span>docker-compose <span class=\"token function\">ps</span> -q runner<span class=\"token punctuation\">)</span><span class=\"token variable\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">fi</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> -z <span class=\"token variable\">$EXISTING_CONTAINER_ID</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n  <span class=\"token assign-left variable\">COMMAND</span><span class=\"token operator\">=</span><span class=\"token variable\">${@<span class=\"token operator\">:-</span>&quot;yarn dev&quot;}</span> docker-compose run --service-ports --rm runner\n<span class=\"token keyword\">else</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">&quot;Existing container <span class=\"token variable\">${EXISTING_CONTAINER_ID}</span>&quot;</span>\n  docker <span class=\"token builtin class-name\">exec</span> -it <span class=\"token variable\">${EXISTING_CONTAINER_ID}</span> <span class=\"token variable\">${COMMAND}</span>\n<span class=\"token keyword\">fi</span>\n</code></pre></div><p>The script is executed like this.</p><div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>PORT<span class=\"token operator\">=</span><span class=\"token operator\">&lt;</span>desired port on host<span class=\"token operator\">&gt;</span> <span class=\"token assign-left variable\">DEBUGPORT</span><span class=\"token operator\">=</span><span class=\"token operator\">&lt;</span>desired debug port on host<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">]</span> ./run <span class=\"token punctuation\">[</span><span class=\"token operator\">&lt;</span>command<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">]</span>\n\nDEFAULTS <span class=\"token assign-left variable\">PORT</span><span class=\"token operator\">=</span><span class=\"token number\">3000</span> <span class=\"token assign-left variable\">DEBUGPORT</span><span class=\"token operator\">=</span><span class=\"token number\">9229</span> <span class=\"token assign-left variable\">COMMAND</span><span class=\"token operator\">=</span><span class=\"token string\">&quot;yarn dev&quot;</span>\n</code></pre></div><p>Sections in <code>[]</code> are optional and have defaults set.</p><p>To start the application, I need to write <code>./run</code> on the shell. It starts the container, exposing the ports 3000 and 9229 on the host and then runs <code>yarn dev</code> inside the container.</p><p><img alt=\"Sample Output\" src=\"https://theoverengineered.blog/docker-local.jpg\" width=\"100%\"/></p><p>Any command can be executed inside the container by prefixing it with <code>./run</code>\nE.g. To add a package, run <code>./run yarn add some-package-name</code></p><p>You could also do <code>./run bash</code> to get a bash shell attached to the container. This bash shell can be used to execute commands inside the container without the prefix &#x27;./run&#x27;</p><p>The script also checks if a container is already running for the application and reuses the container to execute the command. Credits to <a href=\"https://serverfault.com/a/935674/130937\" target=\"_blank\" rel=\"noopener noreferrer\">this answer on ServerFault</a> </p><p>We can also write a similar script for windows machines using cmd/PowerShell.</p><p>This setup has helped me enormously. I don&#x27;t have to worry about installing different versions of node/java/python etc. Besides, now the only dependency for local development is, Docker!</p>","scope":{}},"author":{"name":"Anurag"},"publishDate":"2021-01-04T00:00+08:00","tags":["docker","container","development"],"type":"blogPost"},"__N_SSG":true}