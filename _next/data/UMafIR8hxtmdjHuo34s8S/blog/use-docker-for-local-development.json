{"pageProps":{"title":"Use Docker for local development","slug":"use-docker-for-local-development","heroImageUrl":"","description":"Containers are not only for application deployments. They offer many advantages for local development too. Find out how theOverEngineeredBlog uses Docker for local development.","body":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Docker/Containers have become the de facto standard for building and deploying applications. The isolation, portability and easy scaling capabilities of containers make them the popular choice for app deployments.\"), mdx(\"p\", null, \"However, containers are not only for application deployments but can also be for local development. They can solve many developer issues. The use of Docker containers during development can have the following advantages.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"runs on my machine = runs anywhere\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"there are no cumbersome configuration/version incompatibilities\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The development environment is closer to production\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"easy onboarding of new developers\")), mdx(\"p\", null, \"Let's see how I use Docker for the development of this blog. \"), mdx(\"h2\", null, \"Base Image\"), mdx(\"p\", null, \"TheOverEngineeredBlog is built on next.js which needs node. Also, the package manager of choice is yarn. The official node image on docker hub is \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://hub.docker.com/_/node\",\n    \"title\": \"Official Node DockerHub Image\"\n  }), \"here\"), \". It includes yarn too. This blog uses \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"node:lts\"), \" image to get the latest lts version of node.\"), mdx(\"h2\", null, \"Docker Compose\"), mdx(\"p\", null, \"I created a docker-compose.yml file at the root of the project to define the entire container configuration and add more containers if necessary later.\"), mdx(\"h6\", null, \"docker-compose.yml \", mdx(\"a\", _extends({\n    parentName: \"h6\"\n  }, {\n    \"href\": \"https://github.com/anuragashok/theoverengineered.blog/blob/d784e3e072e19ae753cbe3fd39c64de86388e851/docker-compose.yml\",\n    \"title\": \"View on Github\"\n  }), \"View on GitHub\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-yaml\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"version:\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"'3.7'\"), \"\\n\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"services:\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"runner:\"), \" \\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"image:\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"node:lts\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"ports:\"), \" \\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-bullet\"\n  }), \"-\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"$PORT:3000\\\"\"), \"\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-bullet\"\n  }), \"-\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"$DEBUGPORT:9229\\\"\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"volumes:\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-bullet\"\n  }), \"-\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \".:/app:cached\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-bullet\"\n  }), \"-\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"yarn-cache-volume:/usr/local/share/.cache/yarn/v6:cachedyarn-cache-volume:working_dir: /appcommand:\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"$COMMAND\\\"\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"mes:yarn-cache-volume:me:\"), \"\\n\")), mdx(\"p\", null, \"The compose file defines a service named \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"runner\"), \" using the base image \\\"node:lts\\\".\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ports\"), \" section instructs Docker to expose ports 3000 and 9229 at $PORT and $DEBUGPORT on the host. PORT and DEBUGPORT are environment variables to configure the desired ports on the host.\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"volumes\"), \" section defines mounts and named volume. The root directory of the project is mounted to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/app\"), \" inside the container. Also, it defines a named persistent volume for yarn cache. Docker manages this volume and persists it through the container stop/start. This cache reduces yarn execution time next time the container starts.\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"working_dir\"), \" set the current directory to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"./app\"), \" to avoid changing the directory each time the container starts.\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"command\"), \" is set to an environment variable $COMMAND. It can be supplied when invoking docker-compose.\"), mdx(\"h2\", null, \"RUN script\"), mdx(\"p\", null, \"I like to have a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"run\"), \" script to spawn the container using docker-compose to avoid writing the same commands each time. \"), mdx(\"h6\", null, \"run \", mdx(\"a\", _extends({\n    parentName: \"h6\"\n  }, {\n    \"href\": \"https://github.com/anuragashok/theoverengineered.blog/blob/d784e3e072e19ae753cbe3fd39c64de86388e851/run\",\n    \"title\": \"View on GitHub\"\n  }), \"View on GitHub\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-bash\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-meta\"\n  }), \"#!/bin/sh\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-built_in\"\n  }), \"export\"), \" PORT=\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-variable\"\n  }), \"${PORT:-3000}\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-built_in\"\n  }), \"export\"), \" DEBUGPORT=\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-variable\"\n  }), \"${DEBUGPORT:-9229}\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-built_in\"\n  }), \"export\"), \" COMMAND=\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-variable\"\n  }), \"${@:-\\\"yarn dev\\\"}\"), \"\\nEXISTING_CONTAINER_ID=\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"\\\"\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"if\"), \" [ -n `docker-compose ps -q runner` ]; \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"then\"), \"\\n    EXISTING_CONTAINER_ID=`docker-compose ps -q runner`;\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"elif\"), \" [ -n `docker ps -q --no-trunc | grep $(docker-compose ps -q runner)` ]; \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"then\"), \"\\n    EXISTING_CONTAINER_ID=`docker ps -q --no-trunc | grep $(docker-compose ps -q runner)`;\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"fi\"), \"\\n\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"if\"), \" [ -z \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-variable\"\n  }), \"$EXISTING_CONTAINER_ID\"), \" ]; \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"then\"), \"\\n  COMMAND=\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-variable\"\n  }), \"${@:-\\\"yarn dev\\\"}\"), \" docker-compose run --service-ports --rm runner\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"else\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-built_in\"\n  }), \"echo\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"Existing container \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-variable\"\n  }), \"${EXISTING_CONTAINER_ID}\"), \"\\\"\"), \"\\n  docker \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-built_in\"\n  }), \"exec\"), \" -it \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-variable\"\n  }), \"${EXISTING_CONTAINER_ID}\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-variable\"\n  }), \"${COMMAND}\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"fi\"), \"\\n\")), mdx(\"p\", null, \"The script is executed like this.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-bash\"\n  }), \"[PORT= DEBUGPORT=] ./run []\\n\\nDEFAULTS PORT=3000 DEBUGPORT=9229 COMMAND=\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"yarn dev\\\"\"), \"\\n\")), mdx(\"p\", null, \"Sections in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[]\"), \" are optional and have defaults set.\"), mdx(\"p\", null, \"To start the application, I need to write \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"./run\"), \" on the shell. It starts the container, exposing the ports 3000 and 9229 on the host and then runs \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"yarn dev\"), \" inside the container.\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"/docker-for-local-min.mp4\",\n    \"alt\": \"Sample Output\"\n  }))), mdx(\"p\", null, \"Any command can be executed inside the container by prefixing it with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"./run\"), \"\\nE.g. To add a package, run './run yarn add some-package-name'\"), mdx(\"p\", null, \"You could also do \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"./run bash\"), \" to get a bash shell attached to the container. This bash shell can be used to execute commands inside the container without the prefix './run'\"), mdx(\"p\", null, \"The script also checks if a container is already running for the application and reuses the container to execute the command. Credits to \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://serverfault.com/a/935674/130937\",\n    \"title\": \"Check if container running\"\n  }), \"this answer on ServerFault\"), \" \"), mdx(\"p\", null, \"We can also write a similar script for windows machines using cmd/PowerShell.\"), mdx(\"p\", null, \"This setup has helped me enormously. I don't have to worry about installing different versions of node/java/python etc. Besides, now the only dependency for local development is, Docker!\"));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<p>Docker/Containers have become the de facto standard for building and deploying applications. The isolation, portability and easy scaling capabilities of containers make them the popular choice for app deployments.</p><p>However, containers are not only for application deployments but can also be for local development. They can solve many developer issues. The use of Docker containers during development can have the following advantages.</p><ul><li>runs on my machine = runs anywhere</li><li>there are no cumbersome configuration/version incompatibilities</li><li>The development environment is closer to production</li><li>easy onboarding of new developers</li></ul><p>Let&#x27;s see how I use Docker for the development of this blog. </p><h2>Base Image</h2><p>TheOverEngineeredBlog is built on next.js which needs node. Also, the package manager of choice is yarn. The official node image on docker hub is <a href=\"https://hub.docker.com/_/node\" target=\"_blank\" rel=\"noopener noreferrer\">here</a>. It includes yarn too. This blog uses <code>node:lts</code> image to get the latest lts version of node.</p><h2>Docker Compose</h2><p>I created a docker-compose.yml file at the root of the project to define the entire container configuration and add more containers if necessary later.</p><h6 class=\"MuiTypography-root jss1 MuiTypography-subtitle2\">docker-compose.yml <a href=\"https://github.com/anuragashok/theoverengineered.blog/blob/d784e3e072e19ae753cbe3fd39c64de86388e851/docker-compose.yml\" target=\"_blank\" rel=\"noopener noreferrer\">View on GitHub</a></h6><pre><code class=\"hljs language-yaml\"><span class=\"hljs-attr\">version:</span> <span class=\"hljs-string\">&#x27;3.7&#x27;</span>\n\n<span class=\"hljs-attr\">services:</span>\n  <span class=\"hljs-attr\">runner:</span> \n    <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">node:lts</span>\n    <span class=\"hljs-attr\">ports:</span> \n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">&quot;$PORT:3000&quot;</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">&quot;$DEBUGPORT:9229&quot;</span>\n    <span class=\"hljs-attr\">volumes:</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">.:/app:cached</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">yarn-cache-volume:/usr/local/share/.cache/yarn/v6:cachedyarn-cache-volume:working_dir: /appcommand:</span> <span class=\"hljs-string\">&quot;$COMMAND&quot;</span><span class=\"hljs-attr\">mes:yarn-cache-volume:me:</span>\n</code></pre><p>The compose file defines a service named <code>runner</code> using the base image &quot;node:lts&quot;.</p><p>The <code>ports</code> section instructs Docker to expose ports 3000 and 9229 at $PORT and $DEBUGPORT on the host. PORT and DEBUGPORT are environment variables to configure the desired ports on the host.</p><p>The <code>volumes</code> section defines mounts and named volume. The root directory of the project is mounted to <code>/app</code> inside the container. Also, it defines a named persistent volume for yarn cache. Docker manages this volume and persists it through the container stop/start. This cache reduces yarn execution time next time the container starts.</p><p><code>working_dir</code> set the current directory to <code>./app</code> to avoid changing the directory each time the container starts.</p><p><code>command</code> is set to an environment variable $COMMAND. It can be supplied when invoking docker-compose.</p><h2>RUN script</h2><p>I like to have a <code>run</code> script to spawn the container using docker-compose to avoid writing the same commands each time. </p><h6 class=\"MuiTypography-root jss1 MuiTypography-subtitle2\">run <a href=\"https://github.com/anuragashok/theoverengineered.blog/blob/d784e3e072e19ae753cbe3fd39c64de86388e851/run\" target=\"_blank\" rel=\"noopener noreferrer\">View on GitHub</a></h6><pre><code class=\"hljs language-bash\"><span class=\"hljs-meta\">#!/bin/sh</span>\n<span class=\"hljs-built_in\">export</span> PORT=<span class=\"hljs-variable\">${PORT:-3000}</span>\n<span class=\"hljs-built_in\">export</span> DEBUGPORT=<span class=\"hljs-variable\">${DEBUGPORT:-9229}</span>\n<span class=\"hljs-built_in\">export</span> COMMAND=<span class=\"hljs-variable\">${@:-&quot;yarn dev&quot;}</span>\nEXISTING_CONTAINER_ID=<span class=\"hljs-string\">&quot;&quot;</span>\n<span class=\"hljs-keyword\">if</span> [ -n `docker-compose ps -q runner` ]; <span class=\"hljs-keyword\">then</span>\n    EXISTING_CONTAINER_ID=`docker-compose ps -q runner`;\n<span class=\"hljs-keyword\">elif</span> [ -n `docker ps -q --no-trunc | grep $(docker-compose ps -q runner)` ]; <span class=\"hljs-keyword\">then</span>\n    EXISTING_CONTAINER_ID=`docker ps -q --no-trunc | grep $(docker-compose ps -q runner)`;\n<span class=\"hljs-keyword\">fi</span>\n\n<span class=\"hljs-keyword\">if</span> [ -z <span class=\"hljs-variable\">$EXISTING_CONTAINER_ID</span> ]; <span class=\"hljs-keyword\">then</span>\n  COMMAND=<span class=\"hljs-variable\">${@:-&quot;yarn dev&quot;}</span> docker-compose run --service-ports --rm runner\n<span class=\"hljs-keyword\">else</span>\n  <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;Existing container <span class=\"hljs-variable\">${EXISTING_CONTAINER_ID}</span>&quot;</span>\n  docker <span class=\"hljs-built_in\">exec</span> -it <span class=\"hljs-variable\">${EXISTING_CONTAINER_ID}</span> <span class=\"hljs-variable\">${COMMAND}</span>\n<span class=\"hljs-keyword\">fi</span>\n</code></pre><p>The script is executed like this.</p><pre><code class=\"hljs language-bash\">[PORT= DEBUGPORT=] ./run []\n\nDEFAULTS PORT=3000 DEBUGPORT=9229 COMMAND=<span class=\"hljs-string\">&quot;yarn dev&quot;</span>\n</code></pre><p>Sections in <code>[]</code> are optional and have defaults set.</p><p>To start the application, I need to write <code>./run</code> on the shell. It starts the container, exposing the ports 3000 and 9229 on the host and then runs <code>yarn dev</code> inside the container.</p><p><video autoplay=\"\" loop=\"\" muted=\"\" playsinline=\"\" width=\"100%\"><source src=\"/docker-for-local-min.mp4\" type=\"video/mp4\"/></video></p><p>Any command can be executed inside the container by prefixing it with <code>./run</code>\nE.g. To add a package, run &#x27;./run yarn add some-package-name&#x27;</p><p>You could also do <code>./run bash</code> to get a bash shell attached to the container. This bash shell can be used to execute commands inside the container without the prefix &#x27;./run&#x27;</p><p>The script also checks if a container is already running for the application and reuses the container to execute the command. Credits to <a href=\"https://serverfault.com/a/935674/130937\" target=\"_blank\" rel=\"noopener noreferrer\">this answer on ServerFault</a> </p><p>We can also write a similar script for windows machines using cmd/PowerShell.</p><p>This setup has helped me enormously. I don&#x27;t have to worry about installing different versions of node/java/python etc. Besides, now the only dependency for local development is, Docker!</p>","scope":{}},"author":{"name":"Anurag"},"publishDate":"2020-12-15T00:00+08:00","tags":null,"type":"blogPost"},"__N_SSG":true}