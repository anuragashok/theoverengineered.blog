{"pageProps":{"title":"Use Docker for local development","slug":"use-docker-for-local-development","heroImageUrl":"//images.ctfassets.net/lybfa03y94yw/31kEfTG8wIqkq8mixJ9skZ/6d86d7f4d0c700179d8eae5b31e01766/Untitled_design.jpg","description":"Containers are not only for application deployments. They offer many advantages for local development too. Find out how theOverEngineeredBlog uses Docker for local development.","body":"![a](//images.ctfassets.net/lybfa03y94yw/31kEfTG8wIqkq8mixJ9skZ/6d86d7f4d0c700179d8eae5b31e01766/Untitled_design.jpg)\n    Photo by [Pixabay](https://www.pexels.com/@pixabay?utm_content=attributionCopyText&utm_medium=referral&utm_source=pexels) from [Pexels](https://www.pexels.com/photo/business-coffee-composition-computer-265667/?utm_content=attributionCopyText&utm_medium=referral&utm_source=pexels)\n\nDocker/Containers have become the de facto standard for building and deploying applications. The isolation, portability and easy scaling capabilities of containers make them the popular choice for app deployments.\n\nHowever, containers are not only for application deployments but can also be for local development. They can solve many developer issues. The use of Docker containers during development can have the following advantages.\n- runs on my machine = runs anywhere\n- there are no cumbersome configuration/version incompatibilities\n- The development environment is closer to production\n- easy onboarding of new developers\n\nLet's see how I use Docker for the development of this blog. \n\n## Base Image\nTheOverEngineeredBlog is built on next.js which needs node. Also, the package manager of choice is yarn. The official node image on docker hub is [here][1]. It includes yarn too. This blog uses `node:lts` image to get the latest lts version of node.\n\n## Docker Compose\nI created a docker-compose.yml file at the root of the project to define the entire container configuration and add more containers if necessary later.\n\n###### docker-compose.yml [View on GitHub][2]\n```yaml\nversion: '3.7'\n\nservices:\n  runner: \n    image: node:lts\n    ports: \n      - \"$PORT:3000\"\n      - \"$DEBUGPORT:9229\"\n    volumes:\n    - .:/app:cached\n    - yarn-cache-volume:/usr/local/share/.cache/yarn/v6:cached\n    working_dir: /app\n    command: \"$COMMAND\"\n\nvolumes:\n  yarn-cache-volume:\n```\n\nThe compose file defines a service named `runner` using the base image \"node:lts\".\n\nThe `ports` section instructs Docker to expose ports 3000 and 9229 at $PORT and $DEBUGPORT on the host. PORT and DEBUGPORT are environment variables to configure the desired ports on the host.\n\nThe `volumes` section defines mounts and named volume. The root directory of the project is mounted to `/app` inside the container. Also, it defines a named persistent volume for yarn cache. Docker manages this volume and persists it through the container stop/start. This cache reduces yarn execution time next time the container starts.\n\n`working_dir` set the current directory to `./app` to avoid changing the directory each time the container starts.\n\n`command` is set to an environment variable $COMMAND. It can be supplied when invoking docker-compose.\n\n## RUN script\n\nI like to have a `run` script to spawn the container using docker-compose to avoid writing the same commands each time. \n\n###### run [View on GitHub][3]\n```bash\n#!/bin/sh\nexport PORT=${PORT:-3000}\nexport DEBUGPORT=${DEBUGPORT:-9229}\nexport COMMAND=${@:-\"yarn dev\"}\nEXISTING_CONTAINER_ID=\"\"\nif [ -n `docker-compose ps -q runner` ]; then\n    EXISTING_CONTAINER_ID=`docker-compose ps -q runner`;\nelif [ -n `docker ps -q --no-trunc | grep $(docker-compose ps -q runner)` ]; then\n    EXISTING_CONTAINER_ID=`docker ps -q --no-trunc | grep $(docker-compose ps -q runner)`;\nfi\n\nif [ -z $EXISTING_CONTAINER_ID ]; then\n  COMMAND=${@:-\"yarn dev\"} docker-compose run --service-ports --rm runner\nelse\n  echo \"Existing container ${EXISTING_CONTAINER_ID}\"\n  docker exec -it ${EXISTING_CONTAINER_ID} ${COMMAND}\nfi\n```\n\nThe script is executed like this.\n\n```bash\n[PORT=<desired port on host> DEBUGPORT=<desired debug port on host>] ./run [<command>]\n\nDEFAULTS PORT=3000 DEBUGPORT=9229 COMMAND=\"yarn dev\"\n```\n\nSections in `[]` are optional and have defaults set.\n\nTo start the application, I need to write `./run` on the shell. It starts the container, exposing the ports 3000 and 9229 on the host and then runs `yarn dev` inside the container.\n\n![Sample Output][4]\n\nAny command can be executed inside the container by prefixing it with `./run`\nE.g. To add a package, run `./run yarn add some-package-name`\n\nYou could also do `./run bash` to get a bash shell attached to the container. This bash shell can be used to execute commands inside the container without the prefix './run'\n\nThe script also checks if a container is already running for the application and reuses the container to execute the command. Credits to [this answer on ServerFault][5] \n\nWe can also write a similar script for windows machines using cmd/PowerShell.\n\nThis setup has helped me enormously. I don't have to worry about installing different versions of node/java/python etc. Besides, now the only dependency for local development is, Docker!\n\n[1]: https://hub.docker.com/_/node \"Official Node DockerHub Image\"\n[2]: https://github.com/anuragashok/theoverengineered.blog/blob/d784e3e072e19ae753cbe3fd39c64de86388e851/docker-compose.yml \"View on Github\"\n[3]: https://github.com/anuragashok/theoverengineered.blog/blob/d784e3e072e19ae753cbe3fd39c64de86388e851/run \"View on GitHub\"\n[4]: https://theoverengineered.blog/docker-local.jpg\n[5]: https://serverfault.com/a/935674/130937 \"Check if container running\"","author":{"name":"Anurag"},"publishDate":"2021-01-04T00:00+08:00","tags":["docker","container","development"],"type":"blogPost"},"__N_SSG":true}