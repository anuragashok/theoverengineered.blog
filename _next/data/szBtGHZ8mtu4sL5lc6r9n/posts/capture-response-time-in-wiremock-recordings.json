{"pageProps":{"title":"Capture response time in wiremock recordings","slug":"capture-response-time-in-wiremock-recordings","heroImageUrl":"//images.ctfassets.net/lybfa03y94yw/67cLyOldHSrZ3p11WX9ydJ/e223e57b570f4ec54f62f1fec66002b9/Technology___Theory__1_.jpg","description":"Wiremock provides a great recording feature to capture live flows and create stubs from them. These stubs can then be used to perform the tests without invoking dependencies. I like Wiremock's answers to imitate the actual dependency, including the response time of the dependency. Find out how wiremock can do that.","body":"![a](//images.ctfassets.net/lybfa03y94yw/67cLyOldHSrZ3p11WX9ydJ/e223e57b570f4ec54f62f1fec66002b9/Technology___Theory__1_.jpg)\n    \n\n\n[Wiremock][1] is a wonderful tool for mocking external dependencies for testing. I often swap out the external dependencies/services of an application with wiremock during the application load test. \n\nWiremock provides a nice [recording/snapshotting][2] feature to capture live flows and create stubs from them. It simplifies the effort to create stubs for load tests. I run all my test cases once, record the interactions with dependencies as stubs. These stubs can then be used to perform the load test without invoking dependencies. \n\nI like Wiremock's answers to imitate the actual dependency, including the response time of the dependency. It will influence the statistics (e.g. thread waiting times) of the app under test. Wiremock, however, does not record the response time. I did not find any solution on the web, so I read through [wiremock documentation for extensions][3] and came with a solution. It may not be the best or the simplest, but so far it has worked out for me. \n\nThe solution has three steps. \n\n1. Capture timestamp when the request has been received by wiremock. \n2. Capture timestamp when the response has been received by wiremock, from the backend system. \n3. Register the difference as delay in wiremock stubs. \n\n---\n\n### 1. Capture timestamp when the request has been received by wiremock. \n\nWiremock provides a RequestFilter to intercept incoming requests. The CustomRequestFilter below intercepts the request and records the timestamp as a request header. This header will be used in further steps.\n<a href=\"https://gist.github.com/anuragashok/640e88d42b7ab7b69a40806f0002f337?file=CustomRequestTransformer.java\" class=\"embedly-card\" data-card-width=\"100%\" data-card-controls=\"0\">Embedded content: https://gist.github.com/anuragashok/640e88d42b7ab7b69a40806f0002f337?file=CustomRequestTransformer.java</a>\n\n### 2. Capture timestamp when the response has been received by wiremock from the backend system. \n\nAfter the response is received, wiremock runs ResponseTransformers on it. This CustomResponseTransformer below determines when the response was received. It then retrieves the start timestamp from the header added in Step 1. Then the transformer calculates the response time or delay and adds it as a header in the response. \n<a href=\"https://gist.github.com/anuragashok/640e88d42b7ab7b69a40806f0002f337?file=CustomResponseTransformer.java\" class=\"embedly-card\" data-card-width=\"100%\" data-card-controls=\"0\">Embedded content: https://gist.github.com/anuragashok/640e88d42b7ab7b69a40806f0002f337?file=CustomResponseTransformer.java</a>\n\n### 3. Record the difference as delay in wiremock stubs. \n\nWiremock invokes StubMappingTransformer extensions, to modify StubMappings before they are saved. The CustomStubMappingTransformer below retrieves the delay from the response header added in Step 2. It then modifies the StubMapping to add the delay. The new StubMapping now has our desired request, response and also response time as a delay. \n\n<a href=\"https://gist.github.com/anuragashok/640e88d42b7ab7b69a40806f0002f337?file=CustomStubMappingTransformer.java\" class=\"embedly-card\" data-card-width=\"100%\" data-card-controls=\"0\">Embedded content: https://gist.github.com/anuragashok/640e88d42b7ab7b69a40806f0002f337?file=CustomStubMappingTransformer.java</a>\n\nThe 3 extensions previously created need to be registered with wiremock. Registration can be global or per-stub base. We have to register the delay only when proxying the request to a real backend. I was using the snapshotting method, therefore, extensions were registered only with the proxy stubs. If you use the new record feature, you could enable the extensions globally and add conditional logic inside the transformers.\n\nDo [contact me][4], if there is a simpler solution or if you would like to discuss.\n\n[1]: http://wiremock.org/ \"Wiremock\"\n[2]: http://wiremock.org/docs/record-playback/ \"recording and snapshotting\"\n[3]: http://wiremock.org/docs/extending-wiremock/ \"Extending Wiremock\"\n[4]: https://www.linkedin.com/in/anurag-ashok/ \"Contact me @ LinkedIn\"","author":{"name":"Anurag"},"publishDate":"2021-02-07T00:00+08:00","tags":["wiremock","load test","java","delay"],"type":"blogPost"},"__N_SSG":true}