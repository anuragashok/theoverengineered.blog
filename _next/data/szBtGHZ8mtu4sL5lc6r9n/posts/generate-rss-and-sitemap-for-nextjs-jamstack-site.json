{"pageProps":{"title":"Generate RSS and Sitemap for Next.js JAMstack site","slug":"generate-rss-and-sitemap-for-nextjs-jamstack-site","heroImageUrl":"//images.ctfassets.net/lybfa03y94yw/3IejIjMkhHCU5xGOwXuW5o/6e1c1a898cbcde31682db277183fba0b/GENERATE_RSS_AND_SITEMAP.png","description":"RSS and sitemap are essential for blogs today. RSS Feeds let users subscribe to your content and improves user engagement. On the other hand, a sitemap is for search engines to find and index your content. Let's see how to generate these in a Next.js JAMStack site.","body":"![a](//images.ctfassets.net/lybfa03y94yw/3IejIjMkhHCU5xGOwXuW5o/6e1c1a898cbcde31682db277183fba0b/GENERATE_RSS_AND_SITEMAP.png)\n    Image by <a href=\"https://pixabay.com/users/mohamed_hassan-5229782/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=4059862\">mohamed Hassan</a> from <a href=\"https://pixabay.com/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=4059862\">Pixabay</a>\n\nRSS and sitemap are essential for blogs today. RSS Feeds let users subscribe to your content and improves user engagement. On the other hand, a sitemap is for search engines to find and index your content. \n\nWhen using a CMS like wordpress etc.., the RSS and sitemap XML files are generated at runtime. However, for JAMStack websites, we would like to create them at the build stage. I was not able to find an OOTB solution for next.js to create these files. The XML files for RSS and sitemap are not too complex to generate. Hence, I decided not to introduce any third-party dependencies to generate these files.\n\nThere are mainly three questions to answer when generating these files. Where, When and How?\n\n## 1. Where to place \n\nThe convention followed by many is to place rss.xml and sitemap.xml at the root of the website. Sitemaps can be split into files and referenced from the main sitemap.xml. This is needed when sitemaps grow very huge. We will stick to single sitemap.xml for now.\n\nNext.js routing does not support files that are not content. So, what we can do is, to place these files in the `public` directory. Next's static file serving feature serves the files under this directory at the root of the website.\n\n## 2. When to generate \n\nWe have to generate the files inside the public directory during the build. During the build, the `getStaticProps` function gets invoked for each page. We can leverage this function to create our XML files.\n\nWe can use `getStaticProps` function of any page component to create the files. However, this will add unnecessary code to the pages. So, I created a dummy.tsx page. The `getStaticProps` of this page component will contain the additional build time processing logic.\n\nIf anyone visits /dummy we should probably return 404 and ignore the page from any search engine indexing. \n\n###### dummy.tsx [View on GitHub][1]\n```jsx\nconst Dummy: React.FC = () => (\n  <>\n    <Head>\n      <meta name=\"robots\" content=\"noindex\" />\n    </Head>\n    <DefaultErrorPage statusCode={404} />\n  </>\n);\n```\n\n## 3. How to generate \n\nThe creation of XML files is a matter of iterating over the content and generating the XML tags. This can be implemented in the `getStaticProps` function of `pages/dummy.tsx`. You can find the snippets of the code below. You can refer to GitHub repo for this blog for the full code sample. \n\n###### dummy.tsx - getStaticProps() [View on GitHub][2]\n```javascript\nexport const getStaticProps: GetStaticProps = async () => {\n  const posts = await getPosts();\n  generateRss(posts);\n\n  const pages = await getAllContent();\n  generateSitemap(pages);\n\n  return {\n    props: {},\n  };\n};\n```\n\n###### generateRss() [View on GitHub][3]\n```javascript\nconst generateRssItem = (post: Post): string => `\n  <item>\n    <guid>${getFullUrl(`blog/${post.slug}`)}</guid>\n    <title>${post.title}</title>\n    <link>${getFullUrl(`blog/${post.slug}`)}</link>\n    <description>${post.description}</description>\n    <pubDate>${new Date(post.publishDate).toUTCString()}</pubDate>\n  </item>\n`;\n\nexport default (posts: Post[]): void => {\n  const rss = `<rss version=\"2.0\" xmlns:atom=\"http://www.w3.org/2005/Atom\">\n    <channel>\n      <title>${SITE_TITLE}</title>\n      <link>${getFullUrl('')}</link>\n      <description>${SITE_TITLE}</description>\n      <language>en</language>\n      <lastBuildDate>${new Date(posts[0].publishDate).toUTCString()}</lastBuildDate>\n      <atom:link href=\"${getFullUrl('rss.xml')}\" rel=\"self\" type=\"application/rss+xml\"/>\n      ${posts.map(generateRssItem).join('')}\n    </channel>\n  </rss>`;\n  fs.writeFileSync('./public/rss.xml', rss);\n};\n```\n\n###### generateSitemap() [View on GitHub][4]\n```javascript\nexport default (pages: Content[]): void => {\n  const links = compose(map(mapToSitemapEntry))(pages);\n\n  if (fs.existsSync(SITEMAP_PATH)) {\n    fs.unlinkSync(SITEMAP_PATH);\n  }\n  const stream = fs.createWriteStream(SITEMAP_PATH, { flags: 'a' });\n  stream.write(`<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n  <urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">`);\n  links.forEach((item) => {\n    stream.write(`\n      <url>\n        <loc>${item.url}</loc>\n        <changefreq>${item.changefreq}</changefreq>\n        <priority>${item.priority}</priority>\n      </url>`);\n  });\n  stream.write('\\n');\n  stream.write('</urlset>');\n  stream.end();\n};\n```\n\nYou can later validate these xml files against the specs at [W3C Feed Validator](https://validator.w3.org/feed/ \"W3C Feed Validator\") and [XML Sitemap Validator](https://www.xml-sitemaps.com/validate-xml-sitemap.html \"XML Sitemap Validator\")\n\n[1]: https://github.com/anuragashok/theoverengineered.blog/blob/1b1f462a7cb697ecdcd222313d913101de176dfa/src/pages/dummy.tsx#L15-L22 \"View on GitHub\"\n[2]: https://github.com/anuragashok/theoverengineered.blog/blob/1b1f462a7cb697ecdcd222313d913101de176dfa/src/pages/dummy.tsx#L24-L34 \"View on GitHub\"\n[3]: https://github.com/anuragashok/theoverengineered.blog/blob/1b1f462a7cb697ecdcd222313d913101de176dfa/src/lib/rss.ts \"View on GitHub\"\n[4]: https://github.com/anuragashok/theoverengineered.blog/blob/1b1f462a7cb697ecdcd222313d913101de176dfa/src/lib/sitemap.ts \"View on GitHub\"","author":{"name":"Anurag"},"publishDate":"2020-12-28T00:00+08:00","tags":["rss","sitemap","blogging","jamstack","nextjs"],"type":"blogPost"},"__N_SSG":true}