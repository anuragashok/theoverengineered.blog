{"pageProps":{"title":"Publishing my first artifact to maven central using GitHub actions","slug":"publishing-my-first-artifact-to-maven-central-using-github-actions","heroImageUrl":"//images.ctfassets.net/lybfa03y94yw/5aipgcfbeKO4axygu3H3lj/746c2b1c14a92ebd075d24d10986ec24/github_and_maven__1_.jpg","description":"I wanted to publish the build artifacts of my wiremock extension to maven central. Some changes were needed for the project to be accepted to maven central. This post summarizes these changes and the process of automation using Github Actions.","body":"![a](//images.ctfassets.net/lybfa03y94yw/5aipgcfbeKO4axygu3H3lj/746c2b1c14a92ebd075d24d10986ec24/github_and_maven__1_.jpg)\n    <span>Photo by <a href=\"https://unsplash.com/@flowforfrank?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Ferenc Almasi</a> on <a href=\"https://unsplash.com/s/photos/programming-publish?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Unsplash</a></span>\n\nI recently published a post on how to record response time with wiremock. Later, I created a java library out of it and published it on Github. \n\nI wanted to go a step further and publish the build artifacts to maven central. Fellow developers can then use them without building from source code. Some changes were needed for the project to be accepted to maven central. This post summarizes these changes and the process of automation using Github Actions.\n\n### Overall Process\nThe artifacts cannot be pushed to maven central directly. They first need to be deployed to the Sonatype OSSRH (OSS Repository Hosting) staging repository. Releasing from OSSRH to the maven central can then be initiated manually or via a maven plugin (more on that later). Before release, various checks are done against the project and artifacts to ensure they meet the standards of maven central. The artifacts are synced to maven central only if all the checks pass.\n\nThe detailed steps for meeting the standard and publishing are as follows. \n\n### 1. Create a project and request access to maven central.\n\nMost importantly, you need an account, a project, and permission to publish to OSJRH. You will need to create an account on Sonatype JIRA and then request to create your project via a new JIRA ticket. You can also clone, edit and submit the Jira ticket I created - [OSSRH-64328][1].\n\nThe group-id should follow Maven naming conventions and be the reverse of a domain you own. For projects hosted on GitHub, it can start with `com.github` or `io.github`.\n\nThe folks at sonatype were very quick in their responses and asked to create a repository on GitHub with the Jira ID as the name to verify ownership of the GitHub account. Once ownership was verified, they quickly prepared the group for publishing and deployment to the staging repository. \n\n### 2. Signing Artifacts / GPG setup\n\nOne of the requirements is that the artifacts are signed with GPG. To do this, you first need to create a GPG key using the command 'gpg --gen-key' or tools like GnuPG. You will need to enter a few details and a passphrase to remember.\n\nOnce the keys are created, you need to sync the public keys with popular gpg key servers. You can synchronize the keys by retrieving the public key and then sending it to the keyservers.\n\nExample:\n<a href=\"https://gist.github.com/anuragashok/fab99a3db9e0cae020ce01b6ab749bb9?file=gpg.sh\" class=\"embedly-card\" data-card-width=\"100%\" data-card-controls=\"0\">Embedded content: https://gist.github.com/anuragashok/fab99a3db9e0cae020ce01b6ab749bb9?file=gpg.sh</a>\n\nOnce the public key is sent to one of the keyservers, it is automatically, but not immediately, synchronized with the other keyservers. You can also send it manually to the most common servers instead of waiting for synchronization. The most common servers are:\n\nhkp://pool.sks-keyservers.net  \nhttps://pgp.key-server.io/  \nhttps://keyserver.ubuntu.com/  \nhttps://pgp.mit.edu/  \nhttp://keys.gnupg.net/  \n\nYou can read more detailed instructions on the [sonatype page on pgp signatures][2].\n\nOnce the GPG key is created, you need to add the following plugin to your pom to sign the artifacts. \n\n<a href=\"https://gist.github.com/anuragashok/fab99a3db9e0cae020ce01b6ab749bb9?file=gpg-plugin-pom.xml\" class=\"embedly-card\" data-card-width=\"100%\" data-card-controls=\"0\">Embedded content: https://gist.github.com/anuragashok/fab99a3db9e0cae020ce01b6ab749bb9?file=gpg-plugin-pom.xml</a>\n\nThe pinentry-mode=loopback specification is necessary for automated builds. It tells GPG not to ask for the passphrase to be entered manually. We'll see how to provide the passphrase when we set up GitHub actions.\n\n### 3. Adding metadata to the POM\n\nArtifacts must have a minimal set of metadata before they are eligible for release to Maven Central. The metadata includes fields such as developer name, SCM URLs, licenses, etc. You can find the full list and details on the [sonatype requirements page][3]. You can also reference the [pom of my project][4].\n\n### 4. Generate JavaDoc and sources jar.\n\nMaven central also requires us to generate the JavaDoc and sources jar for consumer use. This is mandatory for projects with a packaging type other than `pom`. You can generate this by adding and configuring their respective Maven plugins to your pom. \n\n<a href=\"https://gist.github.com/anuragashok/fab99a3db9e0cae020ce01b6ab749bb9?file=javadoc-source-plugin-pom.xml\" class=\"embedly-card\" data-card-width=\"100%\" data-card-controls=\"0\">Embedded content: https://gist.github.com/anuragashok/fab99a3db9e0cae020ce01b6ab749bb9?file=javadoc-source-plugin-pom.xml</a>\n\nYou can also see the plugins section in my [project][4].\n\n### 5. Prepare POM for deployment\nYou need to add the URL of the distribution repository to the pom of the project. In this case, we add the staging repository as the distribution repository.\n\n<a href=\"https://gist.github.com/anuragashok/fab99a3db9e0cae020ce01b6ab749bb9?file=distribution-management-pom.xml\" class=\"embedly-card\" data-card-width=\"100%\" data-card-controls=\"0\">Embedded content: https://gist.github.com/anuragashok/fab99a3db9e0cae020ce01b6ab749bb9?file=distribution-management-pom.xml</a>\n\nBy default, the staged artifacts must be manually from the sonatype next staging website. However, this can be automated by adding the `nexus-staging-maven-plugin` to the project pom. \n\n<a href=\"https://gist.github.com/anuragashok/fab99a3db9e0cae020ce01b6ab749bb9?file=nexus-staging-maven-plugin-pom.xml\" class=\"embedly-card\" data-card-width=\"100%\" data-card-controls=\"0\">Embedded content: https://gist.github.com/anuragashok/fab99a3db9e0cae020ce01b6ab749bb9?file=nexus-staging-maven-plugin-pom.xml</a>\n\nAfter the artifact is deployed to the staging repository, the plugin attempts to release the artifact. If any of the checks/requirements for release are not met, the build also fails. The plugin also outputs the list of unmet requirements.\n\n### 6. Automate deployment to staging and release using GitHub Actions\n\nI use GitHub Actions as a CI CD tool. The workflow code is as follows.\n\n<a href=\"https://gist.github.com/anuragashok/fab99a3db9e0cae020ce01b6ab749bb9?file=release-action.yml\" class=\"embedly-card\" data-card-width=\"100%\" data-card-controls=\"0\">Embedded content: https://gist.github.com/anuragashok/fab99a3db9e0cae020ce01b6ab749bb9?file=release-action.yml</a>\n\nThis workflow is triggered when I push a new tag. The workflow then builds the artifact, creates a GitHub release, and then deploys it to the staging repository. The 'nexus-staging-maven-plugin' added in the pom automatically releases the staged artifact when all checks pass.\n\nThe workflow requires a few secrets to be provided via the repository settings. More details can be found on the [GitHub action pages][5]. The following secrets need to be added.\n\n__OSSRH_USERNAME__ : the username for the sonatype Jira login\n\n__OSSRH_PASSWORD__: the password for the sonatype Jira login\n\n__OSSRH\\_GPG\\_SECRET\\_KEY__:  gpg private key ( `gpg --armor --export-secret-keys YOUR_KEY_ID` )\n\n__OSSRH\\_GPG\\_SECRET\\_KEY\\_PASSWORD__ : gpg passphrase\n\n### 7. Enable synchronization after first release.\nThis step is only needed on the first release. You need to inform the sonatype team via a comment on the project creation JIRA ticket when you release your first artifact. The sonatype team then enabled sync to maven central for the project. Once that is done, the artifact appears in maven central in about 10 mins and on the search page in a couple of hours.\n\n---\n\nThe entire process for publishing on Maven Central seems long and complex, but most of these steps are one-time. Automating the rest with a CI CD tool makes publishing subsequent versions trivial.\n\nYou can reference my project [wiremock-extension-record-delay][6] for the complete setup.\n\n[1]: https://issues.sonatype.org/browse/OSSRH-64328 \"Sample JIRA ticket\"\n[2]: https://central.sonatype.org/pages/working-with-pgp-signatures.html \"sonatype page on pgp signatures\"\n[3]: https://central.sonatype.org/pages/requirements.html#sufficient-metadata \"sonatype requirements page\"\n[4]: https://github.com/anuragashok/wiremock-extension-record-delay/commit/11b6188041867dfaf936998e866cc08d7372e02d#diff-9c5fb3d1b7e3b0f54bc5c4182965c4fe1f9023d449017cece3005d3f90e8e4d8 \"example pom from my project\"\n[5]: https://docs.github.com/en/actions/reference/encrypted-secrets \"GitHub action pages\"\n[6]: https://github.com/anuragashok/wiremock-extension-record-delay","author":{"name":"Anurag"},"publishDate":"2021-02-28T00:00+08:00","tags":["maven"],"type":"blogPost"},"__N_SSG":true}